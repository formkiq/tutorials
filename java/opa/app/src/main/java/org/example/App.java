/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.example;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;

import com.formkiq.client.api.AccessControlApi;
import com.formkiq.client.api.DocumentsApi;
import com.formkiq.client.invoker.ApiClient;
import com.formkiq.client.invoker.ApiException;
import com.formkiq.client.model.AddAccessAttribute;
import com.formkiq.client.model.AddDocumentRequest;
import com.formkiq.client.model.GetDocumentAccessAttributesResponse;
import com.formkiq.client.model.SetOpaConfigurationRequest;

public class App {

	private static final String ADMIN_ACCESS_TOKEN = "<ADMIN_ACCESS_TOKEN>";
	private static final String USER_ACCESS_TOKEN =  "<USER_ACCESS_TOKEN>";
	private static final String HTTP_API_URL = "<CloudFormation Outputs HttpApiUrl>";

	private DocumentsApi userDocumentsApi;
	private AccessControlApi adminControlApi;
	private DocumentsApi adminDocumentsApi;

	public static void main(String[] args) throws ApiException, InterruptedException {

		String siteId = "default";

		App app = new App();
		app.setUpApi();

		try {

			// set OPA policy
			app.createOpaPolicy(siteId);

			// Create document with Access Attribute 'documentType'
			AddAccessAttribute accessAttribute0 = new AddAccessAttribute().key("documentType").stringValue("invoice");
			String documentId0 = app.addDocument(siteId, "protected.txt", "my protected content", "text/plain",
					Arrays.asList(accessAttribute0));

			// Create document without Access Attributes
			String documentId1 = app.addDocument(siteId, "unprotected.txt", "my unprotected content", "text/plain",
					null);

			// Create document with different value for Access Attribute 'documentType'
			AddAccessAttribute accessAttribute2 = new AddAccessAttribute().key("documentType").stringValue("bill");
			String documentId2 = app.addDocument(siteId, "protected2.txt", "my protected content2", "text/plain",
					Arrays.asList(accessAttribute2));
			
			System.out.println("");
			
			// wait for documents to be processed
			TimeUnit.SECONDS.sleep(2);

			app.printAccessAttributes(siteId, documentId0);
			app.printAccessAttributes(siteId, documentId1);
			app.printAccessAttributes(siteId, documentId2);
			System.out.println("");

			app.printGetDocumentUserAccess(siteId, documentId0);
			app.printGetDocumentUserAccess(siteId, documentId1);
			app.printGetDocumentUserAccess(siteId, documentId2);
			System.out.println("");

			app.printGetDocumentAdminAccess(siteId, documentId0);
			app.printGetDocumentAdminAccess(siteId, documentId1);
			app.printGetDocumentAdminAccess(siteId, documentId2);

		} finally {
			// remove OPA policy
			app.deleteOpaPolicy(siteId);
		}
	}

	private void printGetDocumentUserAccess(String siteId, String documentId) {
		try {
			userDocumentsApi.getDocument(documentId, siteId, null);
			System.out.println("user has access to document " + documentId);
		} catch (ApiException e) {
			System.out.println("user access denied to document " + documentId);
		}
	}

	private void printGetDocumentAdminAccess(String siteId, String documentId) {
		try {
			userDocumentsApi.getDocument(documentId, siteId, null);
			System.out.println("admin has access to document " + documentId);
		} catch (ApiException e) {
			System.out.println("admin access denied to document " + documentId);
		}
	}

	private void printAccessAttributes(final String siteId, final String documentId) {

		try {
			getDocumentAccessAttributes(siteId, documentId);
			System.out.println("document " + documentId + " has access attributes");
		} catch (ApiException e) {
			System.out.println("document " + documentId + " has NO access attributes");
		}
	}

	private void createOpaPolicy(final String siteId) throws ApiException {

		String policy = String.format("package formkiq%n" 
		+ "import future.keywords.if%n"
		+ "import future.keywords.in%n" 
		+ "default allow := false%n" 
		+ "allow if {%n"
		+ "\t\"opa\" in input.user.roles%n" 
		+ "\tdata.documents.documentType = \"invoice\"%n" 
		+ "}%n");

		adminControlApi.setOpaConfiguration(new SetOpaConfigurationRequest().siteId(siteId).policy(policy));
	}

	private void deleteOpaPolicy(final String siteId) throws ApiException {
		adminControlApi.deleteOpaConfiguration(siteId);
	}

	/**
	 * Setup API classes.
	 */
	public void setUpApi() {

		// Setup User API access
		ApiClient userClient = (new ApiClient()).setReadTimeout(0).setBasePath(HTTP_API_URL);
		
		userClient.addDefaultHeader("Authorization", USER_ACCESS_TOKEN);
		userDocumentsApi = new DocumentsApi(userClient);

		// Setup Admin API access
		ApiClient adminClient = (new ApiClient()).setReadTimeout(0).setBasePath(HTTP_API_URL);
		adminClient.addDefaultHeader("Authorization", ADMIN_ACCESS_TOKEN);

		adminDocumentsApi = new DocumentsApi(adminClient);
		adminControlApi = new AccessControlApi(adminClient);
	}

	/**
	 * Create Document with specific content, content-type and access attributes.
	 * 
	 * @param accessAttributes
	 */
	private String addDocument(final String siteId, final String path, final String content, final String contentType,
			final List<AddAccessAttribute> accessAttributes) throws ApiException {

		AddDocumentRequest req = new AddDocumentRequest().path(path).content(content).contentType(contentType)
				.accessAttributes(accessAttributes);
		String documentId = adminDocumentsApi.addDocument(req, siteId, null).getDocumentId();

		if (accessAttributes == null || accessAttributes.isEmpty()) {
			System.out.println("added document " + documentId + " without access attributes");
		} else {
			System.out.println("added document " + documentId + " with access attributes");
		}

		return documentId;
	}

	private GetDocumentAccessAttributesResponse getDocumentAccessAttributes(final String siteId,
			final String documentId) throws ApiException {
		return adminControlApi.getDocumentAccessAttributes(documentId, siteId);
	}
}
