/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.example;

import java.math.BigDecimal;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

import com.formkiq.client.api.DocumentWorkflowsApi;
import com.formkiq.client.api.DocumentsApi;
import com.formkiq.client.api.RulesetsApi;
import com.formkiq.client.invoker.ApiClient;
import com.formkiq.client.invoker.ApiException;
import com.formkiq.client.model.AddDocumentRequest;
import com.formkiq.client.model.AddQueueRequest;
import com.formkiq.client.model.AddRule;
import com.formkiq.client.model.AddRuleRequest;
import com.formkiq.client.model.AddRuleset;
import com.formkiq.client.model.AddRulesetRequest;
import com.formkiq.client.model.AddRulesetResponse;
import com.formkiq.client.model.AddWorkflowRequest;
import com.formkiq.client.model.AddWorkflowStep;
import com.formkiq.client.model.AddWorkflowStepQueue;
import com.formkiq.client.model.GetWorkflowQueueDocumentsResponse;
import com.formkiq.client.model.RuleCondition;
import com.formkiq.client.model.RuleConditionAttribute;
import com.formkiq.client.model.RuleConditionMust;
import com.formkiq.client.model.RuleConditionOperation;
import com.formkiq.client.model.RulesetStatus;
import com.formkiq.client.model.WorkflowDocument;
import com.formkiq.client.model.WorkflowStatus;

public class App {

	private static final String ACCESS_TOKEN = "<ACCESS_TOKEN>";
	private static final String HTTP_API_URL = "<CloudFormation Outputs HttpApiUrl>";

	private static final String QUEUE_A = "queueA";
	private static final String QUEUE_B = "queueB";

	public static void main(String[] args) throws ApiException, InterruptedException {

		String siteId = UUID.randomUUID().toString();

		App app = new App();
		ApiClient client = app.getClient();

		DocumentWorkflowsApi api = new DocumentWorkflowsApi(client);

		String queueAId = api.addQueue(new AddQueueRequest().name(QUEUE_A), siteId).getQueueId();
		String queueBId = api.addQueue(new AddQueueRequest().name(QUEUE_B), siteId).getQueueId();

		String workflowAId = app.createQueueWorkflow(api, siteId, queueAId, QUEUE_A, "finance");
		String workflowBId = app.createQueueWorkflow(api, siteId, queueBId, QUEUE_B, "management");

		app.createRuleset(client, siteId, workflowAId, workflowBId);

		app.addDocument(client, siteId, "test data", "text/plain");
		app.addDocument(client, siteId, "{\"content\":\"test data\"}", "application/json");

		List<WorkflowDocument> documentsInQueueA = app.getDocumentsInQueue(api, siteId, queueAId);
		System.out.println("# of documents in queue: " + documentsInQueueA.size());
		System.out.println("content type: " + documentsInQueueA.get(0).getDocument().getContentType());

		List<WorkflowDocument> documentsInQueueB = app.getDocumentsInQueue(api, siteId, queueBId);
		System.out.println("# of documents in queue: " + documentsInQueueB.size());
		System.out.println("content type: " + documentsInQueueB.get(0).getDocument().getContentType());
	}

	/**
	 * Get Documents in Queue. Could take a few seconds for documents to be processed.
	 */
	private List<WorkflowDocument> getDocumentsInQueue(final DocumentWorkflowsApi api, final String siteId,
			final String queueId) throws ApiException, InterruptedException {

		final int maxWait = 10;
		int waitCount = 0;
		List<WorkflowDocument> documents = null;

		do {

			GetWorkflowQueueDocumentsResponse response = api.getWorkflowQueueDocuments(queueId, siteId, null, null);
			documents = response.getDocuments();

			if (documents.isEmpty()) {
				TimeUnit.SECONDS.sleep(1);
				waitCount++;

				if (waitCount > maxWait) {
					throw new InterruptedException();
				}
			}

		} while (documents.isEmpty());

		return documents;
	}

	/**
	 * Create Document with specific content and content-type.
	 */
	private String addDocument(final ApiClient client, final String siteId, final String content,
			final String contentType) throws ApiException {
		DocumentsApi api = new DocumentsApi(client);
		AddDocumentRequest req = new AddDocumentRequest().content(content).contentType(contentType);
		return api.addDocument(req, siteId, null).getDocumentId();
	}

	/**
	 * Create Workflow that places documents into a Queue.
	 */
	public String createQueueWorkflow(final DocumentWorkflowsApi api, final String siteId, final String queueId,
			final String queueName, final String approvalRole) throws ApiException {

		AddWorkflowStep step0 = new AddWorkflowStep().stepId(UUID.randomUUID().toString())
				.queue(new AddWorkflowStepQueue().queueId(queueId).addApprovalGroupsItem(approvalRole));

		AddWorkflowRequest req = new AddWorkflowRequest().name("Queue " + queueName).description("Queue " + queueName)
				.status(WorkflowStatus.ACTIVE).addStepsItem(step0);

		return api.addWorkflow(req, siteId).getWorkflowId();
	}

	/**
	 * Create Rule based on document Content-Type.
	 */
	private void createContentTypeRule(RulesetsApi api, final String siteId, String rulesetId, final String workflowId,
			final String contentType) throws ApiException {
		AddRule addRule = new AddRule().description("Workflow " + workflowId).workflowId(workflowId)
				.status(RulesetStatus.ACTIVE)
				.conditions(new RuleCondition()
						.addMustItem(new RuleConditionMust().attribute(RuleConditionAttribute.CONTENT_TYPE)
								.value(contentType).operation(RuleConditionOperation.EQ)));
		AddRuleRequest req = new AddRuleRequest().rule(addRule);

		api.addRule(rulesetId, req, siteId);
	}

	/**
	 * Create Ruleset with Content-Type rules.
	 */
	public void createRuleset(final ApiClient client, final String siteId, final String workflowAId, String workflowBId)
			throws ApiException {

		RulesetsApi api = new RulesetsApi(client);

		String rulesetId = createRuleset(api, siteId);

		createContentTypeRule(api, siteId, rulesetId, workflowAId, "application/json");
		createContentTypeRule(api, siteId, rulesetId, workflowBId, "text/plain");
	}

	/**
	 * Create Ruleset.
	 */
	public String createRuleset(final RulesetsApi api, final String siteId) throws ApiException {
		AddRulesetRequest req = new AddRulesetRequest().ruleset(new AddRuleset().description("Ruleset 1")
				.priority(new BigDecimal(1)).version(new BigDecimal(1)).status(RulesetStatus.ACTIVE));

		AddRulesetResponse addRuleset = api.addRuleset(req, siteId);

		return addRuleset.getRulesetId();
	}

	/**
	 * Create ApiClient.
	 */
	public ApiClient getClient() {
		ApiClient client = (new ApiClient()).setReadTimeout(0).setBasePath(HTTP_API_URL);
		client.addDefaultHeader("Authorization", ACCESS_TOKEN);
		return client;
	}
}
