/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.example;

import com.formkiq.client.api.AttributesApi;
import com.formkiq.client.api.DocumentSearchApi;
import com.formkiq.client.api.DocumentsApi;
import com.formkiq.client.api.SchemasApi;
import com.formkiq.client.invoker.ApiClient;
import com.formkiq.client.invoker.ApiException;
import com.formkiq.client.model.AddAttribute;
import com.formkiq.client.model.AddAttributeRequest;
import com.formkiq.client.model.AddClassification;
import com.formkiq.client.model.AddClassificationRequest;
import com.formkiq.client.model.AddDocumentAttribute;
import com.formkiq.client.model.AddDocumentAttributeClassification;
import com.formkiq.client.model.AddDocumentAttributeStandard;
import com.formkiq.client.model.AddDocumentRequest;
import com.formkiq.client.model.AttributeDataType;
import com.formkiq.client.model.AttributeSchemaCompositeKey;
import com.formkiq.client.model.AttributeSchemaRequired;
import com.formkiq.client.model.DocumentSearch;
import com.formkiq.client.model.DocumentSearchAttribute;
import com.formkiq.client.model.DocumentSearchRequest;
import com.formkiq.client.model.SchemaAttributes;
import com.formkiq.client.model.SearchResultDocument;
import com.formkiq.client.model.SetSitesSchemaRequest;

import java.util.List;
import java.util.UUID;

public class App {

	private static final String ACCESS_TOKEN = "eyJraWQiOiJIYjBIXC9uZmUza2s3a2NZTmlncTJ6VTd6UzloSlFtOFNvaGlKT3B3ZGdzaz0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJjMWFiODViMC03MDMxLTcwMWYtNTBkNi01M2ZmYzczYWJmMjgiLCJjb2duaXRvOmdyb3VwcyI6WyJkZWZhdWx0IiwiQWRtaW5zIl0sImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC51cy1lYXN0LTIuYW1hem9uYXdzLmNvbVwvdXMtZWFzdC0yX0Z6emNwSlRQNyIsImNsaWVudF9pZCI6IjV0bjVkaWI0b3Zncml0cmZtajljanUxczZiIiwib3JpZ2luX2p0aSI6ImYzMTBiOWMwLWQyNmItNGUwOC1iYjZlLWU3NDVmZTFmZmZmZiIsImV2ZW50X2lkIjoiNmNlNDNkYjYtYWM0MC00NjEwLTgwZDAtMTJiOTg2ZDgyY2E5IiwidG9rZW5fdXNlIjoiYWNjZXNzIiwic2NvcGUiOiJhd3MuY29nbml0by5zaWduaW4udXNlci5hZG1pbiIsImF1dGhfdGltZSI6MTcyMDE0NDgyNCwiZXhwIjoxNzIwMjMxMjI0LCJpYXQiOjE3MjAxNDQ4MjQsImp0aSI6IjQ4ODgzZDMxLWI1YTktNDQ5MS1hMzVjLTg3NWU4YjI0NTcwZCIsInVzZXJuYW1lIjoiYzFhYjg1YjAtNzAzMS03MDFmLTUwZDYtNTNmZmM3M2FiZjI4In0.tDsaGZFSypcAX_evm1br83lel8A-Onc5iuNVC-4AYqI4KHLSJZb3QeaLYBgPEJzMHvXRwlZ_SWyPR2efIWnzPQREWkIsXTLOXzoJ2wD3tCQ1okunyekp9U3uq6OgWW3DfgpSxj5Gd6P6Z-ALtnh-2CroufdXZIJUXwQJtnX8D8ZM0OD2oAfKzwvOeLjQJSf0k5tEcdxu4NWPnaR8Wb11mC5q11mFmR1-9QfaeV1_JvxExWhCid-Z6K6mS9WuayrJ0BYzv28h9aBtYkoF6E0k1v2ZO812r_qnLUJ-LRSZO37YNWS9GA8_1iMREvYJGqfrHZxVHXbLXGC8ezMgIrHfOg";// "<ACCESS_TOKEN>";
	private static final String HTTP_API_URL = "https://vunwzzi4ug.execute-api.us-east-2.amazonaws.com";// "<CloudFormation Outputs HttpApiUrl>";

	private DocumentsApi documentsApi;
	private SchemasApi schemasApi;
	private AttributesApi attributesApi;
	private DocumentSearchApi searchApi;

	public static void main(String[] args) throws ApiException {

		String siteId = UUID.randomUUID().toString();

		App app = new App();
		app.setUpApi();

		app.createAttributes(siteId);
		
		app.createSiteSchema(siteId);

		String classificationId = app.createClassifications(siteId);

		// add document failing Site Schema
		try {
			app.addDocument(siteId, "invalid document", "text/plain", null);
		} catch (ApiException e) {
			System.out.println("Cannot add document: " + e.getResponseBody());
		}

		// add document with valid Site Schema
		AddDocumentAttribute att0 = new AddDocumentAttribute(new AddDocumentAttributeStandard().key("securityLevel").stringValue("private"));
		String docId0 = app.addDocument(siteId, "valid Site Schema", "text/plain", List.of(att0));
		System.out.println("Added document: " + docId0 + " with valid Site Schema");

		// add document with documentType / documentNo  Site Schema
		AddDocumentAttribute att1 = new AddDocumentAttribute(new AddDocumentAttributeStandard().key("documentType").stringValue("text"));
		AddDocumentAttribute att2 = new AddDocumentAttribute(new AddDocumentAttributeStandard().key("documentNo").stringValue("txt-001"));
		AddDocumentAttribute classification = new AddDocumentAttribute(new AddDocumentAttributeClassification().classificationId(classificationId));

		String docId1 = app.addDocument(siteId, "valid Document Type Schema", "text/plain", List.of(att1, att2, classification));
		System.out.println("Added document: " + docId1 + " with valid Classification");

		// search by Classification Composite Key
		List<SearchResultDocument> docs = app.search(siteId, "text", "txt-001");
		System.out.println("Found " + docs.size() + " with documentType and documentNo attributes");
	}

	private List<SearchResultDocument> search(String siteId, String documentType, String documentNo) throws ApiException {
		DocumentSearchAttribute attr0 = new DocumentSearchAttribute().key("documentType").eq(documentType);
		DocumentSearchAttribute attr1 = new DocumentSearchAttribute().key("documentNo").eq(documentNo);
		DocumentSearchRequest searchReq = new DocumentSearchRequest().query(new DocumentSearch().attributes(List.of(attr0, attr1)));
		return searchApi.documentSearch(searchReq, siteId, null, null, null).getDocuments();
	}

	private String createClassifications(String siteId) throws ApiException {
		// Create Document Type Classification
		SchemaAttributes schemaAttributes = new SchemaAttributes().addRequiredItem(new AttributeSchemaRequired().attributeKey("documentType")).addRequiredItem(new AttributeSchemaRequired().attributeKey("documentNo"));

		// Add Composite Key to allow searching of both 'documentType', 'documentNo' attributes
		schemaAttributes.addCompositeKeysItem(new AttributeSchemaCompositeKey().addAttributeKeysItem("documentType").addAttributeKeysItem("documentNo"));

		AddClassificationRequest req = new AddClassificationRequest().classification(new AddClassification().name("Document Type Schema").attributes(schemaAttributes));
		return schemasApi.addClassification(siteId, req).getClassificationId();
	}

	private void createAttributes(String siteId) throws ApiException {

		// Add Security Level Attribute
		AddAttributeRequest req0 = new AddAttributeRequest().attribute(new AddAttribute().key("securityLevel").dataType(AttributeDataType.STRING));
		attributesApi.addAttribute(req0, siteId);

		// Add Document Type Attribute
		AddAttributeRequest req1 = new AddAttributeRequest().attribute(new AddAttribute().key("documentType").dataType(AttributeDataType.STRING));
		attributesApi.addAttribute(req1, siteId);

		// Add Document Number Attribute
		AddAttributeRequest req2 = new AddAttributeRequest().attribute(new AddAttribute().key("documentNo").dataType(AttributeDataType.STRING));
		attributesApi.addAttribute(req2, siteId);
	}

	private void createSiteSchema(String siteId) throws ApiException {

		// Site Schema requires a Security Level attribute
		SchemaAttributes schemaAttributes = new SchemaAttributes().addRequiredItem(new AttributeSchemaRequired().attributeKey("securityLevel").addAllowedValuesItem("public").addAllowedValuesItem("private"));
		SetSitesSchemaRequest req = new SetSitesSchemaRequest().name("Site Schema").attributes(schemaAttributes);
		schemasApi.setSitesSchema(siteId, req);
	}

	/**
	 * Setup API classes.
	 */
	public void setUpApi() {

		ApiClient client = (new ApiClient()).setReadTimeout(0).setBasePath(HTTP_API_URL);
		client.addDefaultHeader("Authorization", ACCESS_TOKEN);

		documentsApi = new DocumentsApi(client);
		attributesApi = new AttributesApi(client);
		schemasApi = new SchemasApi(client);
		searchApi = new DocumentSearchApi(client);
	}

	/**
	 * Create Document with specific content and content-type.
	 */
	private String addDocument(final String siteId, final String content, final String contentType, List<AddDocumentAttribute> attributes)
			throws ApiException {
		AddDocumentRequest req = new AddDocumentRequest().content(content).contentType(contentType).attributes(attributes);
		return documentsApi.addDocument(req, siteId, null).getDocumentId();
	}
}
